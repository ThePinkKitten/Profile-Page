/*
  Typing An  "Still learning... but already purring ‚ãÜ‚Å∫‚Çä‚ãÜ ‚òÅÔ∏é",
  "Building 8+ amazing projects... with purr-fect architecture ‚ÇäÀö‚äπ‚ãÜÔΩ°ñ¶π",
  "Typing gently... don't wake my inner lion (‡∏Ö'œâ'‡∏Ö)",
  "Full-stack developer with enterprise experience ‚ùÄ( À∂ÀÜ·óúÀÜÀµ )‚ùÄ",
  "React + Node.js + Docker enthusiast Àò‚Ä¢Ôªå‚Ä¢Àò",
  "Deploying microservices... please stand by ‚ÅΩ‚ÅΩ‡¨ò( Àä·µïÀã )‡¨ì‚Åæ‚Åæ",
  "Containerizing applications with a soft paw touch ‡∑Ü‚∏í‚∏í‚∏ú( À∂'·µï'À∂)‚∏ù",
  "MongoDB + MySQL + Firebase expert ‚ô°( ‚ó°‚Äø‚ó° )",
  "Paws-itively dedicated to clean architecture ìÉ†",
  "Code. Deploy. Purr. Repeat. ‚ô°(=^- œâ -^=)",
  "I speak softly... but I carry enterprise solutions ‚∏ù‚∏ù‚∏ù·µï Ôªå ·µï‚∏ù‚∏ù‚∏ù",
  "CI/CD pipelines with a cute tail ‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö",
  "Little paws, big commits & production deployments ‚ãÜÍí∞‚åØÕí‚Ä¢…∑‚Ä¢‚åØÕíÍí±",
  "Club Management + E-commerce + AI Chess... (‚Åé‚ÅçÃ¥Ãõ·¥ó‚ÅçÃ¥Ãõ‚Åé)",
  "Docker containers are my new cardboard boxes À∂·µî ·µï ·µîÀ∂",
  - Creates typewriter effect with multiple phrases
  - Auto-cycles through defined phrases
*/

/**
 * Array of greeting phrases to display in the typing animation
 * Includes cat-themed emoticons and multi-language greetings
 */
const texts = [
  "Purr-fectly delighted to meet you ‡´ÆÍí∞ ‡æÄ‡Ω≤ >‚∏ù‚∏ù‚∏ù< ‡æÄ‡Ω≤Íí±·Éê",
  "„ÅØ „Åò „ÇÅ „Åæ „Åó „Å¶ œÖ¬¥‚Ä¢ Ôªå ‚Ä¢`œÖ",
  "Nice to meet you ‚ÇçÀÑ‚Ä¢Õà‚öá‚Ä¢ÕàÀÑ‚Çé",
  "Meow-velous to make your acquaintance /·ê† Ã•  ÃÆ  Ã• ·êü\\‡∏Ö",
  "Still learning... but already purring ‚ãÜ‚Å∫‚Çä‚ãÜ ‚òÅÔ∏é",
  "Typing gently... don‚Äôt wake my inner lion (‡∏Ö'œâ'‡∏Ö)",
  "Full-stack fluff in the making ‚ÇäÀö‚äπ‚ãÜÔΩ°ñ¶π",
  "A quiet coder with loud thoughts ‚ùÄ( À∂ÀÜ·óúÀÜÀµ )‚ùÄ",
  "Please don't debug me... I'm sensitive Àò‚Ä¢Ôªå‚Ä¢Àò",
  "Deploying cuddles... please stand by ‚ÅΩ‚ÅΩ‡¨ò( Àä·µïÀã )‡¨ì‚Åæ‚Åæ",
  "Logging in with a soft paw touch ‡∑Ü‚∏í‚∏í‚∏ú( À∂'·µï'À∂)‚∏ù",
  "Sleeping on your code and making it better ‚ô°( ‚ó°‚Äø‚ó° )",
  "Paws-itively dedicated to quality code ìÉ†",
  "Copy. Paste. Purr. Repeat. ‚ô°(=^- œâ -^=)",
  "I speak softly... but I carry a big purr ‚∏ù‚∏ù‚∏ù·µï Ôªå ·µï‚∏ù‚∏ù‚∏ù",
  "Code softly and carry a cute tail ‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö",
  "Little paws, big commits ‚ãÜÍí∞‚åØÕí‚Ä¢…∑‚Ä¢‚åØÕíÍí±",
  "I write code... sometimes in my sleep (‚Åé‚ÅçÃ¥Ãõ·¥ó‚ÅçÃ¥Ãõ‚Åé)",
  "Please wait... compiling cuddles À∂·µî ·µï ·µîÀ∂",  "Napping until next deployment... zzZ‚Çç·ê¢‚Ä¢Ôªå‚Ä¢·ê¢‚Çé",
  "Swagger documentation lover ‡´Æ‚Çç ¬¥‚Ä¢ Àï ‚Ä¢` ‚Çé·Éê",
  "Silent... but emotionally available for code reviews ‚ÇäÀö ö ·ó¢‚Çä",
  "Push gently ‚Äî my microservices have feelings Íí∞‚∏ù‚∏ù‚∏ùÔΩ° ¬∑Ã´ ÔΩ°‚∏ù‚∏ù‚∏ùÍí±",
  "From Android to Web to Desktop development ‚Çç·ê¢. Ã´.·ê¢‚Çé",
  "8 projects and counting... but I purr with purpose  ï Íàç·¥•Íàç î",
  "Payment integration specialist (MoMo + PayPal) ‚∏ù‚∏ù‚∏ù·µï·¥ó·µï‚∏ù‚∏ù‚∏ù",
  "OAuth 2.0 authentication with soft tabs ‚úøÀòÔ∏∂Àò‚úø",
  "Enterprise architecture in a kitten package ‚ù•( ‚∏ù‚∏ù‚∏ù·µï·¥ó·µï‚∏ù‚∏ù‚∏ù )",
  "No bugs, only surprise features... like me ‡´Æ‚Çç À∂·µî ·µï ·µîÀ∂ ‚Çé·Éê",
  "Reading API docs like bedtime stories ìÉ†‚úßÀñ¬∞",
  "Turning complex requirements into purr-fect solutions ( ÀòœâÀò )"
];




// State variables for typing animation
let textIndex = 0;       // Current text being displayed
let charIndex = 0;       // Current character position
let isTyping = false;    // Whether typing animation is active
let typingElement;       // DOM element for displaying text

/**
 * Erase text with typewriter effect
 * Removes one character at a time
 */
function eraseText() {
  if (!isTyping || !typingElement) return;
  const currentText = typingElement.textContent;
    if (currentText.length > 0) {
    typingElement.textContent = currentText.slice(0, -1);
    setTimeout(eraseText, 50);
  } else {
    textIndex = (textIndex + 1) % texts.length;
    charIndex = 0;
    setTimeout(type, 200);
  }
}

/**
 * Type text with typewriter effect
 * Adds one character at a time
 */
function type() {
  if (!isTyping || !typingElement) return;
  const currentText = texts[textIndex];
    if (charIndex < currentText.length) {
    typingElement.textContent += currentText.charAt(charIndex);
    charIndex++;
    setTimeout(type, 60);
  } else {
    setTimeout(eraseText, 1200);
  }
}

/**
 * Reset typing animation with fade effect
 * Used when changing pages or sections
 */
export function resetTyping() {
  if (!typingElement) return;
  
  const originalOpacity = typingElement.style.opacity || "1";
  typingElement.style.opacity = "0.5";
  
  setTimeout(() => {
    typingElement.style.opacity = originalOpacity;
  }, 300);
}

/**
 * Initialize typing animation
 * Finds the target element and starts the animation
 */
export function initTypingAnimation() {
  typingElement = document.querySelector('.typing-text');
  
  if (typingElement) {
    setTimeout(() => {
      isTyping = true;
      type();
    }, 500);
  }
}